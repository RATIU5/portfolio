---
import Page from "../layouts/page.astro";
import ProjectCard from "../components/project-card.astro";
---
<Page>
  <div class="flex flex-col">
    <canvas id="upperDrip" class="h-[250px] w-full"></canvas>
    <div class="mx-auto flex flex-grow items-center justify-center my-6">
      <div class="min-w-[350px] max-w-xs sm:max-w-lg md:max-w-md lg:max-w-2xl xl:max-w-3xl 2xl:max-w-6xl md:ml-6 flex flex-col min-w-xs">
        <h4 class="text-[#9BA7C2] text-xl md:text-2xl xl:text-4xl text-center md:text-left my-2 font-light">Your brand + my digital magic?</h4>
        <div class="relative">
          <h1 class="text-[#EFF7FF] -ml-3 md:ml-0 text-5xl min-w-[23rem] md:text-6xl 2xl:text-8xl text-center md:text-left font-bold leading-[110%]">Now that's a story worth talking about!</h1>
          <svg xmlns="http://www.w3.org/2000/svg" width="150" height="25" viewBox="0 0 207 25" fill="none" class="absolute left-2 sm:left-40 md:-left-2 lg:left-44 xl:-left-4 2xl:left-72 md:w-56 md:h-10 xl:w-60 xl:h-14 2xl:w-80">
            <path d="M22 5C138.42 -2.02743 206.5 6.5 206.5 6.5C206.5 6.5 115.852 1.91566 2 23.5" stroke="#FF5B27" stroke-width="3" stroke-linecap="round"/>
          </svg>
        </div>
        <a href="#" class="group relative cursor-pointer bg-orange-600 hover:bg-orange-500 active:bg-orange-500 text-[#EFF7FF] text-sm pl-3 pr-6 py-2 inline-block mt-12 xl:mt-20 mx-auto md:ml-0 md:inline rounded-lg">
          LET'S TALK
          <span class="absolute top-3.5 -right-3 group-hover:-right-4 group-active:-right-4 transition-all ease-in-out duration-150">
            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="8" viewBox="0 0 30 8" fill="none">
              <path d="M29.3536 4.35355C29.5488 4.15829 29.5488 3.84171 29.3536 3.64645L26.1716 0.464466C25.9763 0.269204 25.6597 0.269204 25.4645 0.464466C25.2692 0.659728 25.2692 0.976311 25.4645 1.17157L28.2929 4L25.4645 6.82843C25.2692 7.02369 25.2692 7.34027 25.4645 7.53553C25.6597 7.7308 25.9763 7.7308 26.1716 7.53553L29.3536 4.35355ZM0 4.5H29V3.5H0L0 4.5Z" fill="white"/>
            </svg>
          </span>
        </a>
      </div>
      <div class="md:mr-6 hidden md:block">
        <svg class="h-full w-60 xl:w-[30rem]" viewBox="0 0 354 371" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M88.3398 188C92.1888 181.333 101.811 181.333 105.66 188L163.684 288.5C167.533 295.167 162.722 303.5 155.024 303.5H38.9763C31.2783 303.5 26.467 295.167 30.316 288.5L88.3398 188Z" fill="#E16741"/>
          <rect x="113" y="75" width="160" height="160" rx="10" fill="#D75151"/>
          <circle cx="268" cy="285" r="86" fill="#9160CF"/>
          <line x1="43" y1="4.37114e-08" x2="43" y2="336" stroke="#D8DEF1" stroke-width="2" stroke-dasharray="20 20"/>
          <line x1="8.74228e-08" y1="44" x2="240" y2="44" stroke="#D8DEF1" stroke-width="2" stroke-dasharray="20 20"/>
        </svg>
      </div>
    </div>
    <canvas id="lowerDrip" class="h-[200px] w-full"></canvas>
  </div>
  <div class="bg-[#24272E] flex flex-col pt-12 justify-center px-6 md:px-0">
    <div class="flex mx-auto flex-col lg:flex-row text-lg lg:text-xl font-light xl:text-2xl">
      <img src="/img/self.webp" alt="self" class="object-cover w-full h-full max-w-sm max-h-sm mb-8 lg:mb-0 md:max-w-none md:max-h-none md:w-96 md:h-96 xl:h-[32rem] xl:w-[32rem] lg:ml-6 lg:mr-8 rounded-lg mx-auto" />
      <div class="flex flex-col justify-center w-full max-w-sm mt-8 md:max-w-none lg:mt-0 md:w-96 lg:mr-6 lg:ml-8 xl:w-[32rem]">
        <p class="text-slate-400 leading-[160%] mb-3">Hi, I'm John.</p>
        <p class="text-blue-50 leading-[160%]">I conceptualize, craft, and deliver premium web and software products that set your customer experience apart. Thatâ€™s the power of R5.</p>
      </div>
    </div>
    <div class="my-36 flex flex-col md:flex-row justify-center items-center flex-wrap">
      <div class="bg-[#2A2D35] p-6 font-light rounded-lg max-w-md min-w-[18rem] m-3 shadow-lg border border-solid border-[#30333E]">
        <span class="text-orange-600 mt-4 mb-1 block">01</span>
        <h2 class="text-blue-50 text-2xl mb-4">BACKEND</h2>
        <p class="text-slate-400 mb-4 font-light">Robust backend development that powers your platform, seamlessly integrating your brand's vision with user functionality.</p>
        <div class="flex justify-end"><a href="#" class="text-orange-600">ABOUT BACKEND</a></div>
      </div>
      <div class="bg-[#2A2D35] p-6 font-light rounded-lg max-w-md min-w-[18rem] m-3 shadow-lg border border-solid border-[#30333E]">
        <span class="text-orange-600 mt-4 mb-1 block">02</span>
        <h2 class="text-blue-50 text-2xl mb-4">FRONTEND</h2>
        <p class="text-slate-400 mb-4 font-light">Captivating frontend development that enchants your audience by fusing your brand style with user-centric designs.</p>
        <div class="flex justify-end"><a href="#" class="text-orange-600">ABOUT FRONTEND</a></div>
      </div>
      <div class="bg-[#2A2D35] p-6 font-light rounded-lg max-w-md min-w-[18rem] m-3 shadow-lg border border-solid border-[#30333E]">
        <span class="text-orange-600 mt-4 mb-1 block">03</span>
        <h2 class="text-blue-50 text-2xl mb-4">DESIGN</h2>
        <p class="text-slate-400 mb-4 font-light">Visually striking designs that mesmerize your audience by melding your brand essence with aesthetic appeal and accessibility.</p>
        <div class="flex justify-end"><a href="#" class="text-orange-600">ABOUT DESIGN</a></div>
      </div>
    </div>
  </div>
  <canvas id="upperDrip2" class="h-[250px] w-full"></canvas>
  <div class="max-w-6xl mt-12 mx-6 lg:mx-auto">
    <div class="flex justify-between items-center px-6">
      <h2 class="font-light text-3xl text-[#9BA7C2]">FEATURES</h2>
      <a href="#" class="text-orange-600">VIEW ALL</a>
    </div>
    <div class="flex flex-wrap justify-center items-center">
      <div class="flex flex-wrap 2xl:justify-between justify-center items-center mt-12">
        <ProjectCard img="/img/brexit.webp" title="Brexit Converter" description="Brexit Converter converts a custom markdown syntax to styleized Canvas LMS content." />
        <ProjectCard img="/img/gradapp.webp" title="Gradapp" description="Gradapp is a person check-in/out system for the graduation process at Bridgerland Technical College." />
        <ProjectCard img="/img/grannydesktop.webp" title="Granny Dashboard" description="Granny Dashboard is a minimal dashboard targeted for PHP development in Docker. It comes pre-installed with my custom Granny PHP container." />
        <ProjectCard img="/img/mcxcstopwatch.webp" title="MCXC Stopwatch" description="MCXC Stopwatch is a custom stopwatched used by coaches for tracking their students distance times." />
      </div>
    </div>
  </div>
  <div>
    <div class="flex flex-col items-center my-24">
      <h5 class="text-orange-600 font-light text-sm">THE ROADMAP</h5>
      <h2 class="md:text-8xl text-5xl font-sans mt-4 text-[#EFF7FF] font-light text-center">Your Website</h2>
      <h2 class="md:text-9xl text-6xl font-serif italic mb-4 text-[#EFF7FF] font-light text-center">in 3 steps</h2>
      <p class="text-[#9BA7C2] max-w-md text-center font-light">My strategy guarantees a website aligned with your business goals.</p>
    </div>
    <div class="px-6">
      <div class="w-full rounded-lg overflow-hidden mb-6 md:flex max-w-4xl mx-auto md:mb-12">
        <img src="/img/notes.png" alt="notebook on table" class="object-cover w-full md:w-[50%] h-48 md:h-auto" />
        <div class="bg-[#24272E] p-6">
          <p class="text-orange-600 font-light text-sm mb-3">ARE WE A GOOD FIT?</p>
          <h2 class="text-[#EFF7FF] font-light text-3xl mb-3">INTRODUCTORY MEETING</h2>
          <p class="text-[#9BA7C2] font-light">Prior to diving in, we assess your needs. What are your expectations for your upcoming website? What prompts the need for a fresh site? Which objectives are you aiming for, and what challenges can a modern website address for you?</p>
        </div>
      </div>
      <div class="w-full rounded-lg overflow-hidden mb-6 md:flex md:flex-row-reverse max-w-4xl mx-auto md:mb-12">
        <img src="/img/blueprint.png" alt="blueprint" class="object-cover w-full h-48 md:w-[50%] md:h-auto" />
        <div class="bg-[#24272E] p-6">
          <p class="text-orange-600 font-light text-sm mb-3">CREATING THE PATH</p>
          <h2 class="text-[#EFF7FF] font-light text-3xl mb-3">DESIGN & DIRECTION</h2>
          <p class="text-[#9BA7C2] font-light">Together, we devise a method that aligns your goals with the requirements of your audience. With this structure in mind, I develop preliminary wireframes and an interactive model. This gives us a clear insight into the website and the user experience.</p>
        </div>
      </div>
      <div class="w-full rounded-lg overflow-hidden mb-6 md:flex max-w-4xl mx-auto md:mb-12">
        <img src="/img/design.png" alt="website development work" class="object-cover w-full h-48 md:w-[50%] md:h-auto" />
        <div class="bg-[#24272E] p-6">
          <p class="text-orange-600 font-light text-sm mb-3">SOME MAGIC</p>
          <h2 class="text-[#EFF7FF] font-light text-3xl mb-3">DEVELOPMENT</h2>
          <p class="text-[#9BA7C2] font-light">The magic comes to life. Guided by the previously etched concept, I produce a top-notch visual design meticulously resonating with your brand's voice. A digital persona that catapults you above competitors, hits the sweet spot with your audience, and affords a premium user interface.</p>
        </div>
      </div>
    </div>
  </div> 
  <canvas id="lowerDrip2"></canvas>
</Page>

<script>
import { createScene, createCanvas } from "../lib/canvas";
import { renderDrip, createDrips, type DripOptions} from "../lib/drips";

let canvasUpper = document.getElementById("upperDrip") as HTMLCanvasElement;
let canvasLower = document.getElementById("lowerDrip") as HTMLCanvasElement;

let canvasUpper2 = document.getElementById("upperDrip2") as HTMLCanvasElement;
let canvasLower2 = document.getElementById("lowerDrip2") as HTMLCanvasElement;

type State = {
  drips: DripOptions[],
  resizeTimeout?: number,
}

createScene<State>([
  createCanvas<State>(canvasUpper, {
    setup: (canvas) => {
      canvas.width = window.innerWidth;
      canvas.height = 250;

      const drips = createDrips({
        dripWidth: 100,
        containerWidth: canvas.width,
        reverse: false
      });

      return {
        drips: drips,
        resizeTimeout: undefined,
      }
    },
    resize: ({canvas, state}) => {
      canvas.width = window.innerWidth;
      canvas.height = 250;

      if (state.resizeTimeout) {
        clearTimeout(state.resizeTimeout); 
      }

      state.resizeTimeout = setTimeout(() => {
        const drips = createDrips({
          dripWidth: 100,
          containerWidth: canvas.width,
          reverse: false
        });
        state.drips = drips;
        state.resizeTimeout = 0;
      }, 250);
    },

    paint: ({ctx, state, canvas}) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const frequency = Math.random() * (0.008 + 0.001) + 0.001;
      const evenRange = {min: 150, max: 200};
      const oddRange = {min: 100, max: 150};

      for (let i = 0; i < state.drips.length; i++) {
        state.drips[i].angle += frequency;
        if (state.drips[i].angle > 2 * Math.PI) {
            state.drips[i].angle -= 2 * Math.PI;
        }

        if (i % 2 === 0) {
            let evenAmplitude = (evenRange.max - evenRange.min) / 2;
            state.drips[i].height = evenAmplitude * Math.sin(state.drips[i].angle) + evenAmplitude + evenRange.min;
        } else { 
            let oddAmplitude = (oddRange.max - oddRange.min) / 2;
            state.drips[i].height = oddAmplitude * Math.sin(state.drips[i].angle) + oddAmplitude + oddRange.min;
        }

        renderDrip(ctx, {
            x: state.drips[i].x,
            y: state.drips[i].y,
            height: state.drips[i].height,
            width: state.drips[i].width,
            invert: state.drips[i].invert,
          reverse: false,
        });
      }
    }
  }),
  createCanvas<State>(canvasLower, {
    setup: (canvas) => {
      canvas.width = window.innerWidth;
      canvas.height = 200;

      const drips = createDrips({
        dripWidth: 100,
        containerWidth: canvas.width,
        reverse: true,
      });

      return {
        drips: drips,
        resizeTimeout: undefined,
      }
    },
    resize: ({canvas, state}) => {
      canvas.width = window.innerWidth;
      canvas.height = 200;

      if (state.resizeTimeout) {
        clearTimeout(state.resizeTimeout); 
      }

      state.resizeTimeout = setTimeout(() => {
        const drips = createDrips({
          dripWidth: 100,
          containerWidth: canvas.width,
          reverse: true,
        });
        state.drips = drips;
        state.resizeTimeout = 0;
      }, 250);
    },

    paint: ({ctx, state, canvas}) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const frequency = Math.random() * (0.008 + 0.001) + 0.001;
      const evenRange = {min: 0, max: 50};
      const oddRange = {min: 50, max: 100};

      for (let i = 0; i < state.drips.length; i++) {
        state.drips[i].angle += frequency;
        if (state.drips[i].angle > 2 * Math.PI) {
            state.drips[i].angle -= 2 * Math.PI;
        }

        if (i % 2 === 0) {
            let evenAmplitude = (evenRange.max - evenRange.min) / 2;
            state.drips[i].y = evenAmplitude * Math.sin(state.drips[i].angle) + evenAmplitude + evenRange.min;
        } else { 
            let oddAmplitude = (oddRange.max - oddRange.min) / 2;
            state.drips[i].y = oddAmplitude * Math.sin(state.drips[i].angle) + oddAmplitude + oddRange.min;
        }

        renderDrip(ctx, {
            x: state.drips[i].x,
            y: state.drips[i].y,
            height: state.drips[i].height,
            width: state.drips[i].width,
            invert: state.drips[i].invert,
            reverse: true
        });
      }
    }
  }),
  createCanvas<State>(canvasUpper2, {
    setup: (canvas) => {
      canvas.width = window.innerWidth;
      canvas.height = 250;

      const drips = createDrips({
        dripWidth: 100,
        containerWidth: canvas.width,
        reverse: false
      });

      return {
        drips: drips,
        resizeTimeout: undefined,
      }
    },
    resize: ({canvas, state}) => {
      canvas.width = window.innerWidth;
      canvas.height = 250;

      if (state.resizeTimeout) {
        clearTimeout(state.resizeTimeout); 
      }

      state.resizeTimeout = setTimeout(() => {
        const drips = createDrips({
          dripWidth: 100,
          containerWidth: canvas.width,
          reverse: false
        });
        state.drips = drips;
        state.resizeTimeout = 0;
      }, 250);
    },

    paint: ({ctx, state, canvas}) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const frequency = Math.random() * (0.008 + 0.001) + 0.001;
      const evenRange = {min: 150, max: 200};
      const oddRange = {min: 100, max: 150};

      for (let i = 0; i < state.drips.length; i++) {
        state.drips[i].angle += frequency;
        if (state.drips[i].angle > 2 * Math.PI) {
          state.drips[i].angle -= 2 * Math.PI;
        }

        if (i % 2 === 0) {
          let evenAmplitude = (evenRange.max - evenRange.min) / 2;
          state.drips[i].height = evenAmplitude * Math.sin(state.drips[i].angle) + evenAmplitude + evenRange.min;
        } else { 
          let oddAmplitude = (oddRange.max - oddRange.min) / 2;
          state.drips[i].height = oddAmplitude * Math.sin(state.drips[i].angle) + oddAmplitude + oddRange.min;
        }

        renderDrip(ctx, {
          x: state.drips[i].x,
          y: state.drips[i].y,
          height: state.drips[i].height,
          width: state.drips[i].width,
          invert: state.drips[i].invert,
          reverse: false,
        });
      }
    }
  }),
createCanvas<State>(canvasLower2, {
    setup: (canvas) => {
      canvas.width = window.innerWidth;
      canvas.height = 200;

      const drips = createDrips({
        dripWidth: 100,
        containerWidth: canvas.width,
        reverse: true,
      });

      return {
        drips: drips,
        resizeTimeout: undefined,
      }
    },
    resize: ({canvas, state}) => {
      canvas.width = window.innerWidth;
      canvas.height = 200;

      if (state.resizeTimeout) {
        clearTimeout(state.resizeTimeout); 
      }

      state.resizeTimeout = setTimeout(() => {
        const drips = createDrips({
          dripWidth: 100,
          containerWidth: canvas.width,
          reverse: true,
        });
        state.drips = drips;
        state.resizeTimeout = 0;
      }, 250);
    },

    paint: ({ctx, state, canvas}) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const frequency = Math.random() * (0.008 + 0.001) + 0.001;
      const evenRange = {min: 0, max: 50};
      const oddRange = {min: 50, max: 100};

      for (let i = 0; i < state.drips.length; i++) {
        state.drips[i].angle += frequency;
        if (state.drips[i].angle > 2 * Math.PI) {
            state.drips[i].angle -= 2 * Math.PI;
        }

        if (i % 2 === 0) {
            let evenAmplitude = (evenRange.max - evenRange.min) / 2;
            state.drips[i].y = evenAmplitude * Math.sin(state.drips[i].angle) + evenAmplitude + evenRange.min;
        } else { 
            let oddAmplitude = (oddRange.max - oddRange.min) / 2;
            state.drips[i].y = oddAmplitude * Math.sin(state.drips[i].angle) + oddAmplitude + oddRange.min;
        }

        renderDrip(ctx, {
            x: state.drips[i].x,
            y: state.drips[i].y,
            height: state.drips[i].height,
            width: state.drips[i].width,
            invert: state.drips[i].invert,
            reverse: true
        });
      }
    }
  })
]);
</script>

